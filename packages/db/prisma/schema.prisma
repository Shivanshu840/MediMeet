generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone         String?
  address       String?
  gender        String?
  dob           String?
  health        Health?
  appointments  Appointment[]

  UserCurrentData UserCurrentData[]

  Lead Lead[]
}

model Doctor {
  id            String @id @default(uuid())
  firstName     String?
  lastName      String?
  email         String? @unique
  password      String?
  spiciality    String?
  experience    String?
  education     String?
  fee           String?
  address       String?
  about         String?
  image         String?
  appointments  Appointment[]
}

model Appointment {
  id            String   @id @default(uuid())
  title         String
  dateTime      DateTime
  userId        String
  doctorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Health {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  weight            Float?
  foodCalories      Int?
  steps             Int?
  heartRate         Int?
  sleepTime         Float?
  bloodPressure     Json?    
  temperature       Float?
  airQuality        Json?    
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  datedAt           DateTime @updatedAt
}

model UserCurrentData {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  
  totalApiHits        Int      @default(0) // Number of API requests made by the user
  formSubmissions     Int      @default(0) // Number of form submissions
  whatsappMessages    Int      @default(0) // Messages received via WhatsApp
  emailResponses      Int      @default(0) // Email responses received
  smsResponses        Int      @default(0) // SMS responses received
  appointmentBookings Int      @default(0) // Number of appointments booked
  lastActive          DateTime @default(now()) // Last active timestamp
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Lead {
  id         String  @id @default(uuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id])
  score      Int     @default(0) // Engagement score based on UserCurrentData
  rank       Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model HealthSuggestion {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  @@index([userId])
}